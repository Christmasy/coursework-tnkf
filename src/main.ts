import 'reflect-metadata';
import {Container} from 'inversify';
import {LoggerInterface} from './common/logger/logger.interface.js';
import LoggerService from './common/logger/logger.service.js';
import {COMPONENT} from './types/component.type.js';
import {ConfigInterface} from './common/config/config.interface.js';
import ConfigService from './common/config/config.service.js';
import {types} from '@typegoose/typegoose';
import Application from './app/application.js';
import { DatabaseInterface } from './common/database-client/database.interface.js';
import DatabaseService from './common/database-client/database.service.js';
import { UserServiceInterface } from './modules/user/user-service.interface.js';
import UserService from './modules/user/user.service.js';
import { UserEntity, UserModel } from './modules/user/user.entity.js';
import {TaskEntity, TaskModel} from './modules/task/task.entity.js';
import {TaskServiceInterface} from './modules/task/task-service.interface.js';
import TaskService from './modules/task/task.service.js';
import CommentService from './modules/comment/comment.service.js';
import {CommentServiceInterface} from './modules/comment/comment-service.interface.js';
import {CommentEntity, CommentModel} from './modules/comment/comment.entity.js';

const applicationContainer = new Container();
applicationContainer.bind<Application>(COMPONENT.Application).to(Application).inSingletonScope();
applicationContainer.bind<LoggerInterface>(COMPONENT.LoggerInterface).to(LoggerService).inSingletonScope();
applicationContainer.bind<ConfigInterface>(COMPONENT.ConfigInterface).to(ConfigService).inSingletonScope();
applicationContainer.bind<DatabaseInterface>(COMPONENT.DatabaseInterface).to(DatabaseService).inSingletonScope();
applicationContainer.bind<UserServiceInterface>(COMPONENT.UserServiceInterface).to(UserService);
applicationContainer.bind<types.ModelType<UserEntity>>(COMPONENT.UserModel).toConstantValue(UserModel);
applicationContainer.bind<TaskServiceInterface>(COMPONENT.TaskServiceInterface).to(TaskService);
applicationContainer.bind<types.ModelType<TaskEntity>>(COMPONENT.TaskModel).toConstantValue(TaskModel);
applicationContainer.bind<CommentServiceInterface>(COMPONENT.CommentServiceInterface).to(CommentService);
applicationContainer.bind<types.ModelType<CommentEntity>>(COMPONENT.CommentModel).toConstantValue(CommentModel);

const application = applicationContainer.get<Application>(COMPONENT.Application);
await application.init();
